/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */
function CameraClient(url) {
    this.url = url;
    var id = 1;
    
    function doJsonRpcRequest(method, params, methodCall, callback_success, callback_error) {
        var request = {};
        if (methodCall)
            request.id = id++;
        request.jsonrpc = "2.0";
        request.method = method;
        if (params !== null) {
            request.params = params;
        }
        JSON.stringify(request);
        
        $.ajax({
            type: "POST",
            url: url,
            data: JSON.stringify(request),
            success: function (response) {
                if (methodCall) {
                    if (response.hasOwnProperty("result") && response.hasOwnProperty("id")) {
                        callback_success(response.id, response.result);
                    } else if (response.hasOwnProperty("error")) {
                        if (callback_error != null)
                            callback_error(response.error.code,response.error.message);
                    } else {
                        if (callback_error != null)
                            callback_error(-32001, "Invalid Server response: " + response);
                    }
                }
            },
            error: function () {
                if (methodCall)
                    callback_error(-32002, "AJAX Error");
            },
            dataType: "json"
        });
        return id-1;
    }
    this.doRPC = function(method, params, methodCall, callback_success, callback_error) {
        return doJsonRpcRequest(method, params, methodCall, callback_success, callback_error);
    }
}

CameraClient.prototype.restartSystem = function(password, callbackSuccess, callbackError) {
    var params = {password : password};
    return this.doRPC("restartSystem", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.shutdownSystem = function(password, callbackSuccess, callbackError) {
    var params = {password : password};
    return this.doRPC("shutdownSystem", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.checkSystemStates = function(callbackSuccess, callbackError) {
    var params = null;
    return this.doRPC("checkSystemStates", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.setLiveMode = function(mode, callbackSuccess, callbackError) {
    var params = {mode : mode};
    return this.doRPC("setLiveMode", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.calibCommand = function(command, callbackSuccess, callbackError) {
    var params = {command : command};
    return this.doRPC("calibCommand", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.checkCalibStates = function(callbackSuccess, callbackError) {
    var params = null;
    return this.doRPC("checkCalibStates", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.streamCommand = function(command, callbackSuccess, callbackError) {
    var params = {command : command};
    return this.doRPC("streamCommand", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.recordCommand = function(command, callbackSuccess, callbackError) {
    var params = {command : command};
    return this.doRPC("recordCommand", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.checkLiveStates = function(callbackSuccess, callbackError) {
    var params = null;
    return this.doRPC("checkLiveStates", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.setFieldCorners = function(corners, callbackSuccess, callbackError) {
    var params = {corners : corners};
    return this.doRPC("setFieldCorners", params, true, callbackSuccess, callbackError);
};
CameraClient.prototype.checkFieldCorners = function(callbackSuccess, callbackError) {
    var params = null;
    return this.doRPC("checkFieldCorners", params, true, callbackSuccess, callbackError);
};
